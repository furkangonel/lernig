//
//  MockLessonRepository.swift
//  lernig
//
//  Created by Furkan GÃ¶nel on 30.07.2025.
//

import Foundation

class MockLessonRepository: LessonRepository {
    
    private var lessons: [Lesson] = []
    private var topics: [Topic] = []
    private var contents: [TopicContent] = []
    private var questions: [Question] = []
    private var questionSets: [QuestionSet] = []
    
    // MARK: - Lessons
    func fetchLessons(for userId: String) async throws -> [Lesson] {
        return lessons.filter { $0.userId == userId }
    }
    
    func addLesson(_ lesson: Lesson) async throws {
        lessons.append(lesson)
    }
    
    func deleteLesson(_ lessonId: String) async throws {
        lessons.removeAll { $0.id == lessonId }
    }
    
    // MARK: - Topics
    func fetchTopics(for lessonId: String) async throws -> [Topic] {
        return topics.filter { $0.lessonId == lessonId }
    }
    
    func addTopic(_ topic: Topic) async throws {
        topics.append(topic)
    }
    
    func deleteTopic(_ topicId: String) async throws {
        topics.removeAll { $0.id == topicId }
    }
    
    // MARK: - Contents
    func fetchContents(for topicId: String) async throws -> [TopicContent] {
        return contents.filter { $0.topicId == topicId }
    }
    
    func addContent(_ content: TopicContent) async throws {
        contents.append(content)
    }
    
    func deleteContent(_ contentId: String) async throws {
        contents.removeAll { $0.id == contentId }
    }
    
    // MARK: - Question Sets
    func fetchQuestionSets(for topicId: String) async throws -> [QuestionSet] {
        return questionSets.filter { $0.topicId == topicId }
    }
    
    func addQuestionSet(_ questionSet: QuestionSet) async throws {
        questionSets.append(questionSet)
    }
    
    func deleteQuestionSet(_ questionSetId: String) async throws {
        questionSets.removeAll { $0.id == questionSetId }
        questions.removeAll { $0.questionSetId == questionSetId }
    }
    
    // MARK: - Questions
    func fetchQuestions(for topicId: String) async throws -> [Question] {
        return questions.filter { $0.topicId == topicId }
    }
    
    func fetchQuestions(for questionSetId: String, in topicId: String) async throws -> [Question] {
        return questions.filter { $0.topicId == topicId && $0.questionSetId == questionSetId }
    }
    
    func addQuestion(_ question: Question) async throws {
        questions.append(question)
    }
    
    func deleteQuestion(_ questionId: String) async throws {
        questions.removeAll { $0.id == questionId }
    }
    
    // MARK: - AI Functions
    func generateContent(lesson: String, topic: String, prompt: String, educationLevel: EducationLevel) async throws -> String {
        return """
        Mock Content for \(topic)
        
        This is a mock content generated for testing purposes. 
        Lesson: \(lesson)
        Education Level: \(educationLevel.displayName)
        User Prompt: \(prompt)
        
        This content would normally be generated by AI based on the lesson and topic provided.
        """
    }
    
    func generateQuestions(lesson: String, topic: Topic, prompt: String, count: Int, educationLevel: EducationLevel, questionTypes: QuestionType) async throws -> [(question: String, answer: String)] {
        var result: [(String, String)] = []
        
        for i in 1...count {
            result.append((
                "Mock Question \(i) for \(topic)",
                "Mock Answer \(i) - This is a test answer for the topic \(topic)"
            ))
        }
        
        return result
    }
}
